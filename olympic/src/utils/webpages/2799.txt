



Extension:AbuseFilter - MediaWiki





































	
	
	
	Issue tracker: #AbuseFilter
	
	Extension:AbuseFilter
	
		From mediawiki.org
		
		
		
		
		Jump to navigation
		Jump to search
		Translate this pageOther languages:Bahasa Indonesia
Deutsch
Deutsch (Sie-Form)
English
Türkçe
català
dansk
español
français
galego
magyar
polski
português
português do Brasil
română
sicilianu
čeština
български
русский
עברית
العربية
سنڌي
فارسی
हिन्दी
中文
日本語
粵語
한국어


MediaWiki extensions manual 

 AbuseFilter

Release status:  stable





Implementation 
User activity , Special page , API 

Description 
Allows specific behavior-based restrictions to be placed on wiki activity


Author(s) 

Andrew Garrett
Daimona Eaytoy
Marius Hoch
River Tarnell
Victor Vasiliev





Compatibility policy 
Snapshots releases along with MediaWiki. Master is not backward compatible.


MediaWiki 
1.33+


PHP 
5.4+ recommended


Database changes 
Yes



Tables 
abuse_filter 
abuse_filter_action 
abuse_filter_history 
abuse_filter_log 


License 
GNU General Public License 2.0 or later

Download
Download extension 
Git [?]: 
Download Git master
browse&nbsp;repository (GitHub)
commit&nbsp;history
repository contributors (GitHub)
code review






Parameters 

$wgAbuseFilterConditionLimit
$wgAbuseFilterRangeBlockSize
$wgAbuseFilterAnonBlockDuration
$wgAbuseFilterLogIPMaxAge
$wgAbuseFilterCentralDB
$wgAbuseFilterDefaultWarningMessage
$wgAbuseFilterEmergencyDisableAge
$wgAbuseFilterProfileActionsCap
$wgAbuseFilterActionRestrictions
$wgAbuseFilterActions
$wgAbuseFilterLogIP
$wgAbuseFilterPrivateDetailsForceReason
$wgAbuseFilterEmergencyDisableCount
$wgAbuseFilterLogPrivateDetailsAccess
$wgAbuseFilterSlowFilterRuntimeLimit
$wgAbuseFilterEmergencyDisableThreshold
$wgAbuseFilterLocallyDisabledGlobalActions
$wgAbuseFilterBlockDuration
$wgAbuseFilterDefaultDisallowMessage
$wgAbuseFilterValidGroups
$wgAbuseFilterNotificationsPrivate
$wgAbuseFilterBlockAutopromoteDuration
$wgAbuseFilterIsCentral
$wgAbuseFilterNotifications




Added rights 

abusefilter-modify
abusefilter-log-detail
abusefilter-view
abusefilter-log
abusefilter-privatedetails
abusefilter-privatedetails-log
abusefilter-modify-restricted
abusefilter-revert
abusefilter-view-private
abusefilter-log-private
abusefilter-hidden-log
abusefilter-hide-log
abusefilter-modify-global





Hooks used 
ArticleDelete BeforeCreateEchoEvent ChangeTagsListActive ContributionsToolLinks EditFilterMergedContent GetAutoPromoteGroups HistoryPageToolLinks ListDefinedTags LoadExtensionSchemaUpdates PageSaveComplete ParserOutputStashForEdit RecentChange_save RenameUserSQL TitleMove UndeletePageToolLinks UnitTestsAfterDatabaseSetup UnitTestsBeforeDatabaseTeardown UploadStashFile UploadVerifyUpload UserMergeAccountFields 




Hooks provided 
AbuseFilter-builder AbuseFilter-deprecatedVariables AbuseFilter-computeVariable AbuseFilter-contentToString AbuseFilter-filterAction AbuseFilterAlterVariables AbuseFilter-generateTitleVars AbuseFilter-generateUserVars AbuseFilter-generateStaticVars AbuseFilter-interceptVariable AbuseFilterShouldFilterAction AbuseFilterGetDangerousActions 





Translate the AbuseFilter extension if it is available at translatewiki.net




Check usage and version matrix.






Issues 
Open tasks · Report a bug








AbuseFilter



2020 Coolest Tool
Award Winner




in the category


Quality







The AbuseFilter extension allows privileged users to set specific actions to be taken when actions by users, such as edits, match certain criteria.


For example, a filter could be created to prevent anonymous users from adding external links, or to block a user who removes more than 2000 characters.



Contents

1 Installation
2 Configuration

2.1 User rights
2.2 Parameters
2.3 Emergency throttling


3 Creating and managing filters
4 API

4.1 list = abusefilters
4.2 list = abuselog


5 Possible errors
6 Integration with other extensions

6.1 Adding variables for filtering
6.2 Adding custom actions
6.3 Adding rule groups


7 See also



Installation
Download and place the file(s) in a directory called AbuseFilter in your extensions/ folder.
Only when installing from git run Composer to install PHP dependencies, by issuing composer install --no-dev in the extension directory. (See task T173141 for potential complications.)
Add the following code at the bottom of your LocalSettings.php: wfLoadExtension( 'AbuseFilter' );

Run the update script which will automatically create the necessary database tables that this extension needs.
Configure as required.
&nbsp;Done – Navigate to Special:Version on your wiki to verify that the extension is successfully installed.


To users running MediaWiki 1.26 or earlier:


The instructions above describe the new way of installing this extension using wfLoadExtension().
If you need to install this extension on these earlier versions (MediaWiki 1.26 and earlier), instead of wfLoadExtension( 'AbuseFilter' );, you need to use:

require_once "$IP/extensions/AbuseFilter/AbuseFilter.php";






When installing from Git, please note that this extension requires Composer .


So, after installation from Git change to the directory containing the extension e.g. "../extensions/AbuseFilter/" and run composer install --no-dev, or when updating: composer update --no-dev.


Alternatively as well as preferably add the line "extensions/AbuseFilter/composer.json" to the "composer.local.json" file in the root directory of your wiki like e.g.

{
	"extra": {
		"merge-plugin": {
			"include": [
				"extensions/AbuseFilter/composer.json"
			]
		}
	}
}





Configuration
User rights


Once you installed the extension, you'll have to set up the user rights in "LocalSettings.php".



Right

Description


abusefilter-modify
Create or modify abuse filters


abusefilter-view
View abuse filters


abusefilter-log
View the abuse log


abusefilter-log-detail
View detailed abuse log entries


abusefilter-privatedetails
View private data in the abuse log


abusefilter-modify-restricted
Modify abuse filters with restricted actions


abusefilter-modify-global
Create or modify global abuse filters


abusefilter-revert
Revert all changes by a given abuse filter


abusefilter-view-private
View abuse filters marked as private


abusefilter-log-private
View log entries of abuse filters marked as private


abusefilter-hide-log
Hide entries in the abuse log


abusefilter-hidden-log
View hidden abuse log entries


abusefilter-privatedetails-log
View the AbuseFilter private details access log



For example, the following sample configuration would allow sysops to do everything they want with AbuseFilter, and everyone to view the log and see public filter settings:

$wgGroupPermissions['sysop']['abusefilter-modify'] = true;
$wgGroupPermissions['*']['abusefilter-log-detail'] = true;
$wgGroupPermissions['*']['abusefilter-view'] = true;
$wgGroupPermissions['*']['abusefilter-log'] = true;
$wgGroupPermissions['sysop']['abusefilter-privatedetails'] = true;
$wgGroupPermissions['sysop']['abusefilter-modify-restricted'] = true;
$wgGroupPermissions['sysop']['abusefilter-revert'] = true;

Filters marked as private can only be viewed by users with either the abusefilter-modify or abusefilter-view-private permission.
Parameters


Variable name

Default value

Description


$wgAbuseFilterActions

[
    'throttle' =&gt; true,
    'warn' =&gt; true,
    'disallow' =&gt; true,
    'blockautopromote' =&gt; true,
    'block' =&gt; true,
    'rangeblock' =&gt; false,
    'degroup' =&gt; false,
    'tag' =&gt; true
]


The possible actions that can be taken by abuse filters. When adding a new action, check if it is restricted in $wgAbuseFilterActionRestrictions and, if it is, don't forget to add the abusefilter-modify-restricted right to the appropriate user groups.


$wgAbuseFilterConditionLimit

1000


The maximum number of 'conditions' that can be used each time the filters are run against a change. (More complex filters require more 'conditions').


$wgAbuseFilterValidGroups

[
    'default'
]


The list of "groups" filters can be divided into. By default there is only one group. Other extensions may add other groups.


$wgAbuseFilterEmergencyDisableThreshold

[
    'default' =&gt; 0.05
]


Disable a filter if it matched more than 2 edits, constituting more than 5&nbsp;% of the actions which were checked against the filter's group in the "observed" period (at most one day), unless the filter has been changed in the last 86400 seconds (one day). See emergency throttling.


$wgAbuseFilterEmergencyDisableCount

[
    'default' =&gt; 2
]



$wgAbuseFilterEmergencyDisableAge

[
    'default' =&gt; 86400
]



$wgAbuseFilterParserClass

'AbuseFilterParser'


Name of AbuseFilter's parser class.


$wgAbuseFilterActionRestrictions

[
	"throttle" =&gt; false,
	"warn" =&gt; false,
	"disallow" =&gt; false,
	"blockautopromote" =&gt; true,
	"block" =&gt; true,
	"rangeblock" =&gt; true,
	"degroup" =&gt; true,
	"tag" =&gt; false
]


Users must have the "abusefilter-modify-restricted" user right as well as "abusefilter-modify" in order to create or modify filters which carry out these actions.


$wgAbuseFilterNotifications

false


Allows to configure the extension to send hit notifications to Special:RecentChanges or UDP. Available options: rc, udp, rcandudp


$wgAbuseFilterNotificationsPrivate

false


Enable notifications for private filters.


$wgAbuseFilterCentralDB

null


Name of a database where global abuse filters will be stored in (only supported in the latest, development version). Requires CentralAuth installed otherwise global filters will break on a wikifarm.


$wgAbuseFilterIsCentral

false


Set this variable to true for the wiki where global AbuseFilters are stored in (only supported in the latest, development version). Requires CentralAuth installed otherwise global filters will break on a wikifarm.


$wgAbuseFilterLocallyDisabledGlobalActions

[
	"throttle" =&gt; false,
	"warn" =&gt; false,
	"disallow" =&gt; false,
	"blockautopromote" =&gt; false,
	"block" =&gt; false,
	"rangeblock" =&gt; false,
	"degroup" =&gt; false,
	"tag" =&gt; false
]


Disallow Centralised filters from taking actions set as true in this variable.


$wgAbuseFilterBlockDuration

'indefinite'


Duration of blocks made by AbuseFilter.
as of 1.31.0-wmf.25 block durations may be specified for every single filter and will override this variable. This variable is only used when enabling the block in order to preselect a default duration.


$wgAbuseFilterAnonBlockDuration

null


Duration of blocks made by AbuseFilter on users who are not logged in. The value of $wgAbuseFilterBlockDuration will be used if this is not set.
as of 1.31.0-wmf.25 block durations may be specified for every single filter and will override this variable. This variable is only used when enabling the block in order to preselect a default duration.


$wgAbuseFilterBlockAutopromoteDuration

5


Duration, in days, for which users' autopromotion is blocked by filters.


$wgAbuseFilterCustomActionsHandlers

[]


Callback functions for custom actions. (deprecated in 1.36) Use the AbuseFilterCustomActions hook instead.


$wgAbuseFilterDefaultWarningMessage

[
    'default' =&gt; 'abusefilter-warning'
]


Default warning messages, per filter group


$wgAbuseFilterDefaultDisallowMessage

[
    'default' =&gt; 'abusefilter-disallowed'
]


Default disallow messages, per filter group


$wgAbuseFilterLogIPMaxAge

3 * 30 * 24 * 3600


Age used as cutoff when purging old IP log data. Defaults to 3 months. Used by maintenance script purgeOldLogIPData.php.


$wgAbuseFilterProfileActionsCap

10000


Number of action that determines when to reset profiling stats.


$wgAbuseFilterLogPrivateDetailsAccess

false


Whether accessing private information from a filter log entry is logged.


$wgAbuseFilterPrivateDetailsForceReason

false


Whether users are forced to provide a reason for accessing private information from a filter log entry.


$wgAbuseFilterSlowFilterRuntimeLimit

500


Runtime in milliseconds before a filter is considered slow.


$wgAbuseFilterRangeBlockSize

[
    'IPv4' =&gt; '16',
    'IPv6' =&gt; '19',
]


Size of the range blocked by 'rangeblock' action.


$wgAbuseFilterLogIP

true


Whether to include IP in the abuse_filter_log





Emergency throttling


AbuseFilter comes with a feature that automatically throttles (disable) filters that have been edited recently and match a certain threshold of the latest actions.


This is done to prevent harmful edits on the filters to block every user that performs an action on the wiki or similar.


The condition to disable the filter depend on those variables:

$wgAbuseFilterEmergencyDisableThreshold - Percent of matches over the total amount of actions in the observed period.
$wgAbuseFilterEmergencyDisableCount - Count of matches of the filter in the observed period.
$wgAbuseFilterEmergencyDisableAge - Age of the filter to take it into account. If the last edit of the filter is older than this number of seconds, the filter won't be throttled, unless it's already throttled.
$wgAbuseFilterProfileActionsCap - Maximum number of recent actions to count against the threshold. Note that each action increments a counter, and once this counter reaches this configured value, this counter and the number of recent actions that matches all filters are reset to 0.


Throttled filters can be identified in the list of filters (Special:AbuseFilter) with the state Enabled, throttled.
Throttling happens silently, and there's no way to see when a filter got throttled.


When a filter gets throttled, it doesn't perform any dangerous action (the ones that can prevent the ongoing action), and only "safe" actions are allowed.
Throttled filters don't get enabled automatically. To disable the throttling, you need to edit the filter.
Note that you need to actually change something from the filter: changing something from the filter's notes is sufficient.


Note that editing the filter updates its age, and can cause it to be disabled if it reaches again the conditions to be throttled in a short period since the last edit, leading to a unusable filter if your wiki has more abuse edits than legitimate ones.
Filters can also get randomly throttled if the action count reaches $wgAbuseFilterProfileActionsCap, causing all filter matches count to reset to 0, and then someone repeatedly makes a filter to hit.

Creating and managing filters


Once the extension has been installed, filters can be created/tested/changed/deleted and the logs can be accessed from the Abuse filter management page Special:AbuseFilter.

Rules format - The basics of how to write a filter
Actions
Global Rules
Guide to optimizing condition limit usage
To import filters from Wikipedia: When you have installed the extension, go to w:Special:AbuseFilter, choose a filter (say w:Special:AbuseFilter/3), then click "Export this filter to another wiki", copy the text, go to "Special:AbuseFilter/import" on your wiki, paste the text.
m:Small wiki toolkits/Starter kit/AbuseFilter - A guide for small wiki communities on metawiki
API


AbuseFilter adds two API list modules, one for details of abuse filters ("abusefilters") and one for the abuse log, since it is separate from other MediaWiki logs ("abuselog"). It is not possible to create or modify abuse filters using the API.

list = abusefilters


List information about filters

Parameters

abfstartid - The filter id to start enumerating from
abfendid - The filter id to stop enumerating at
abfdir - The direction in which to enumerate (older, newer)
abfshow - Show only filters which meet these criteria (enabled|!enabled|deleted|!deleted|private|!private)
abflimit - The maximum number of filters to list
abfprop - Which properties to get (id|description|pattern|actions|hits|comments|lasteditor|lastedittime|status|private)


When filters are private, some of the properties specified with abfprop will be missing unless you have the appropriate user rights.

Examples



List non-private abuse filters

api.php?action=query&amp;list=abusefilters&amp;abfshow=!private&amp;abfprop=id|hits&nbsp;[try in ApiSandbox]Result
&lt;api&gt;
  &lt;query&gt;
    &lt;abusefilters&gt;
      &lt;filter id="1" hits="867" /&gt;
      &lt;filter id="3" hits="66110" /&gt;
      &lt;filter id="5" hits="464" /&gt;
      &lt;filter id="6" hits="19" /&gt;
      &lt;filter id="8" hits="7" /&gt;
      &lt;filter id="9" hits="24869" /&gt;
      &lt;filter id="11" hits="10033" /&gt;
      &lt;filter id="14" hits="63" /&gt;
      &lt;filter id="15" hits="15" /&gt;
      &lt;filter id="16" hits="44" /&gt;
    &lt;/abusefilters&gt;
  &lt;/query&gt;
  &lt;query-continue&gt;
    &lt;abusefilters abfstartid="18" /&gt;
  &lt;/query-continue&gt;
&lt;/api&gt;


list = abuselog


List instances where actions triggered an abuse filter.

Parameters

aflstart - The timestamp to start enumerating from
aflend - The timestamp to stop enumerating at
afldir - The direction in which to enumerate (older, newer)
afluser - Show only entries where the action was attempted by a given user or IP address.
afltitle - Show only entries where the action involved a given page.
aflfilter - Show only entries that triggered a given filter ID
afllimit - The maximum number of entries to list
aflprop - Which properties to get: (ids|filter|user|ip|title|action|details|result|timestamp|hidden|revid|wiki)
Example



List instances where the abuse filter was triggered in response to actions from the user "SineBot"

api.php?action=query&amp;list=abuselog&amp;afluser=SineBot&amp;aflprop=ids&nbsp;[try in ApiSandbox]Result
&lt;api&gt;
  &lt;query&gt;
    &lt;abuselog&gt;
      &lt;item id="900937" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="888404" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="862751" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="855649" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="842429" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="840958" filter_id="1" user="SineBot" result="" /&gt;
      &lt;item id="824151" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="804892" filter_id="211" user="SineBot" result="" /&gt;
      &lt;item id="205254" filter_id="58" user="SineBot" result="disallow" /&gt;
      &lt;item id="205252" filter_id="58" user="SineBot" result="disallow" /&gt;
    &lt;/abuselog&gt;
  &lt;/query&gt;
  &lt;query-continue&gt;
    &lt;abuselog aflstart="2009-04-19T02:07:55Z" /&gt;
  &lt;/query-continue&gt;
&lt;/api&gt;


Possible errors
Some users might experience that creating new filters or modifying old filters fail and the user just gets redirected to the original page. If the Wiki is using SSL certificates, this error could possibly be because of the $wgServer  value, which might be using "http://" instead of "https://". An indication of this error will be, the browser giving https warning for Special:AbuseFilter pages. (Topic:T23dyyih0ofjada5)
Integration with other extensions


You can integrate AbuseFilter with other extension in various ways.

Adding variables for filtering


It is possible to add new variables, to be used in abuse filters. A list of examples is available . To do that, you should:

Add a handler for the AbuseFilter-builder  hook. To add a variable, you should use $builder['vars']['variable_name'] = 'i18n-key';, where variable_name is the name of the variable, and i18n-key is the fragment of an i18n key. The full key will be abusefilter-edit-builder-vars-{$your_key}.
Add the i18n messages you chose at the previous point.
Choose a hook handler where the variable will be computed. Depending on your use case, you could:
Implement the AbuseFilter-generateTitleVars  hook; this is specifically thought for page-related variables;
Implement the AbuseFilter-generateUserVars  hook; this is specifically thought for user-related variables;
Implement the AbuseFilter-generateGenericVars  hook; this is for variables not bound to a specific page or user;
Implement the AbuseFilterAlterVariables  hook; this is a bit more flexible than the other hooks, but it has a downside: your variable will not be available when examining past RecentChanges entries. If you want to implement that feature (and it's recommended to do so), you should use one of the hooks listed above, and use its third parameter ($RCRow).
Inside the hook handler, there are two ways to add a variable:
The "direct" way is calling $vars-&gt;setVar( 'var_name', var_value );. This is ideal only when the value is easy and quick to compute: the value is computed even if no active filter will use it.
The "lazy" way is calling $vars-&gt;setLazyLoadVar( 'var_name', 'method_name', $params );. Here, 'method_name' is a (unique) identifier that will be used to compute the variable (it's recommended to prefix it with the name of your extension). To register the method, you should add a handler for the AbuseFilter-computeVariable  hook; therein, you should check if the $method passed matches your 'method_name', and if so, compute the variable. Lastly, $params is an array of parameters that you'll need to compute the variable; these are passed to the computeVariable hook handler. For an example of this, you can check out CentralAuth's global_user_groups.
Adding custom actions


You can add custom action handlers, so that each filter may perform further actions.
To do that, you choose a name for the action ('my-action' from now on), and then:

Create a class named e.g. MyAction, that should extend \MediaWiki\Extension\AbuseFilter\Consequence, which can also implement HookAborterConsequence or ConsequencesDisablerConsequence
Add a subscriber to the AbuseFilterCustomActions hook; the subscriber should provide a callback as documented in the hook documentation, that returns an instance of the class created above, for instance:
class MyAction extends \MediaWiki\Extension\AbuseFilter\Consequence {
    public function run() {
        throw new \Exception( 'Write me' );
    }
}

public function onAbuseFilterCustomActions( &amp;$actions ) {
    $actions[] = function ( \MediaWiki\Extension\AbuseFilter\Consequence\Parameters $params, array $rawParams ) : MyConsequence {
        return new MyAction( $params, $rawParams );
    };
}



Then you should add the following i18n messages; you can replace 'my_action' with e.g. 'block' to see what the messages are for:

'abusefilter-edit-action-${my_action}'
'abusefilter-action-${my_action}'
Adding rule groups


You can also add extra rule groups, which can be used to group existing abuse filters.
Note that, at the moment, each filter can only be in a single group (T116642).
Currently, the only known consumer of this feature is Extension:StructuredDiscussions.
To do that, you should:

Append the name of the group to $wgAbuseFilterValidGroups
Add some code to run the filters with your group. Note that AbuseFilter won't do that on its own. To do that, you should construct an AbuseFilterRunner object, passing in the name of your group.
See also
Several WMF wikis where it's enabled (and with which configuration)
This extension is being used on one or more Wikimedia projects. This probably means that the extension is stable and works well enough to be used by such high-traffic websites. Look for this extension's name in Wikimedia's CommonSettings.php and InitialiseSettings.php configuration files to see where it's installed. A full list of the extensions installed on a particular wiki can be seen on the wiki's Special:Version page.





Retrieved from "https://www.mediawiki.org/w/index.php?title=Extension:AbuseFilter&amp;oldid=4850360"
		Categories: Stable extensionsUser activity extensionsSpecial page extensionsAPI extensionsGPL licensed extensionsExtensions in Wikimedia version controlArticleDelete extensionsBeforeCreateEchoEvent extensionsChangeTagsListActive extensionsContributionsToolLinks extensionsEditFilterMergedContent extensionsGetAutoPromoteGroups extensionsHistoryPageToolLinks extensionsListDefinedTags extensionsLoadExtensionSchemaUpdates extensionsPageSaveComplete extensionsParserOutputStashForEdit extensionsRecentChange save extensionsRenameUserSQL extensionsTitleMove extensionsUndeletePageToolLinks extensionsUnitTestsAfterDatabaseSetup extensionsUnitTestsBeforeDatabaseTeardown extensionsUploadStashFile extensionsUploadVerifyUpload extensionsUserMergeAccountFields extensionsAll extensionsExtensions requiring Composer with gitExtensions used on WikimediaSpam management extensionsHidden categories: Extensions with release branches compatibility policyExtensions with manual MediaWiki version
	



	Navigation menu
	
		
	
		
		Personal tools
	
	
		
		EnglishNot logged inTalkContributionsCreate accountLog in
		
	


		
			
	
		
		Namespaces
	
	
		
		ExtensionDiscussion
		
	


			
	
	
		
		Variants
			expanded
			collapsed
	
	
		
		
		
	


		
		
			
	
		
		Views
	
	
		
		ReadView sourceView history
		
	


			
	
	
		
		More
			expanded
			collapsed
	
	
		
		
		
	


			
	
			
				Search
			
		
			
				
				
				
				
			
		
	


		
	
	

	
		
	
	
	
		
		Navigation
	
	
		
		Main pageGet MediaWikiGet extensionsTech blogContribute
		
	


	
	
		
		Support
	
	
		
		User helpFAQTechnical manualSupport deskCommunication
		
	


	
		
		Development
	
	
		
		Bug trackerCode docsCode repositoryStatistics
		
	


	
		
		MediaWiki.org
	
	
		
		Community portalRecent changesTranslate contentRandom pageVillage pumpSandbox
		
	


	
		
		Tools
	
	
		
		What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageWikidata item
		
	


	
		
		Print/export
	
	
		
		Create a bookDownload as PDFPrintable version
		
	


	
	
		
		In other languages
	
	
		
		
		Add links
	






	
	 This page was last edited on 3 October 2021, at 22:28.
	Text is available under the Creative Commons Attribution-ShareAlike License;
additional terms may apply.
See Terms of Use for details.


	
	Privacy policy
	About MediaWiki.org
	Disclaimers
	Code of Conduct
	Mobile view
	Developers
	Statistics
	Cookie statement


	
	
	







